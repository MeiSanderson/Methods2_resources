# checks whether the input parameter is positive AND a whole number
if(number > 0 && trunc(number) == number)
{
for(i in 2:10)
{
if((number / i) > 0 && number %% i == 0)
{
if(i == 10)
{
print(i)
prime = TRUE
run = FALSE
}
}
}
if(prime == FALSE)
{
run = FALSE
}
}
else
{
prime = FALSE
run = FALSE
}
}
return(prime)
}
is_prime(6)
if((3 / 2) > 0 && is.integer(3 / 2) == FALSE)
{
print("hi")
}
###Pernille comments:
# Hint: You may use a while-loop or a for-loop to test divisibility
# Remember to handle edge cases like numbers less than 2
# Example usage:
# result <- is_prime(29)
# print(result)
# Expected Output (for number = 29): TRUE
is_prime(6)
is_prime(3)
is_prime <- function(number)
{
prime = FALSE
run = TRUE
while(run == TRUE)
{
# checks whether the input parameter is positive AND a whole number
if(number > 0 && trunc(number) == number)
{
for(i in 2:10)
{
if((number / i) > 0 && trunc(number/i) != 0)
{
if(i == 10)
{
print(i)
prime = TRUE
run = FALSE
}
}
}
if(prime == FALSE)
{
run = FALSE
}
}
else
{
prime = FALSE
run = FALSE
}
}
return(prime)
}
is_prime(3)
trunc(3/10)
3/10
library(dplyr)
frac(3/10)
library(dplyr)
dplyr::frac(3/10)
is_prime <- function(number)
{
prime = FALSE
run = TRUE
while(run == TRUE)
{
# checks whether the input parameter is positive AND a whole number
if(number > 0 && trunc(number) == number)
{
for(i in 2:10)
{
if((number / i) > 0 && (number/i)-trunc(number/i) != 0)
{
#&& frac(number/i) != 0
if(i == 10)
{
print(i)
prime = TRUE
run = FALSE
}
}
}
if(prime == FALSE)
{
run = FALSE
}
}
else
{
prime = FALSE
run = FALSE
}
}
return(prime)
}
is_prime(3)
is_prime(6)
(6/10)-trunc(6/10)
is_prime <- function(number)
{
prime = FALSE
run = TRUE
while(run == TRUE)
{
# checks whether the input parameter is positive AND a whole number
if(number > 0 && trunc(number) == number)
{
for(i in 2:10)
{
if((number / i) > 0 && (number/i)-trunc(number/i) == 0)
{
#&& frac(number/i) != 0
if(i == 10)
{
print(i)
prime = TRUE
run = FALSE
}
}
}
if(prime == FALSE)
{
run = FALSE
}
}
else
{
prime = FALSE
run = FALSE
}
}
return(prime)
}
is_prime <- function(number)
{
prime = FALSE
run = TRUE
while(run == TRUE)
{
# checks whether the input parameter is positive AND a whole number
if(number > 0 && trunc(number) == number)
{
for(i in 2:10)
{
if((number / i) > 0 && (number/i)-trunc(number/i) == 0 && (number / i) != number)
{
#&& frac(number/i) != 0
if(i == 10)
{
print(i)
prime = TRUE
run = FALSE
}
}
}
if(prime == FALSE)
{
run = FALSE
}
}
else
{
prime = FALSE
run = FALSE
}
}
return(prime)
}
is_prime(6)
is_prime(3)
is_prime(6)
is_prime(3)
is_prime <- function(number)
{
prime = FALSE
run = TRUE
while(run == TRUE)
{
# checks whether the input parameter is positive AND a whole number
if(number > 0 && trunc(number) == number)
{
for(i in 2:10)
{
if((number / i) > 0 && (number/i)-trunc(number/i) == 0 && (number / i) != 1)
{
#&& frac(number/i) != 0
if(i == 10)
{
print(i)
prime = TRUE
run = FALSE
}
}
}
if(prime == FALSE)
{
run = FALSE
}
}
else
{
prime = FALSE
run = FALSE
}
}
return(prime)
}
is_prime(3)
is_prime(6)
(6/10)-trunc(6/10)
is_prime <- function(number)
{
prime = FALSE
run = TRUE
while(run == TRUE)
{
# checks whether the input parameter is positive AND a whole number
if(number > 0 && trunc(number) == number)
{
for(i in 2:10)
{
if((number / i) > 0 && (number/i)-trunc(number/i) == 0 && (number / i) != 1)
{
prime = TRUE
run = FALSE
if(i == 10)
{
print(i)
prime = TRUE
run = FALSE
}
}
}
if(prime == FALSE)
{
run = FALSE
}
}
else
{
prime = FALSE
run = FALSE
}
}
return(prime)
}
is_prime(6)
is_prime(3)
is_prime(9)
is_prime(11)
is_prime <- function(number)
{
prime = FALSE
run = TRUE
while(run == TRUE)
{
# checks whether the input parameter is positive AND a whole number
if(number > 0 && trunc(number) == number)
{
for(i in 2:10)
{
if((number / i) > 0 && (number/i)-trunc(number/i) == 0 && (number / i) != 1)
{
prime = TRUE
run = FALSE
}
}
#if(prime == FALSE)
#{
# run = FALSE
#}
}
else
{
prime = FALSE
run = FALSE
}
}
return(prime)
}
is_prime(11)
is_prime <- function(number)
{
prime = FALSE
run = TRUE
while(run == TRUE)
{
# checks whether the input parameter is positive AND a whole number
if(number > 0 && trunc(number) == number)
{
for(i in 2:10)
{
if((number / i) > 0 && (number/i)-trunc(number/i) == 0 && (number / i) != 1)
{
prime = TRUE
run = FALSE
}
}
#if(prime == FALSE)
#{
# run = FALSE
#}
}
else
{
prime = FALSE
run = FALSE
}
}
return(prime)
}
is_prime(11)
is_prime <- function(number)
{
prime = FALSE
run = TRUE
while(run == TRUE)
{
# checks whether the input parameter is positive AND a whole number
if(number > 0 && trunc(number) == number)
{
for(i in 2:10)
{
if((number / i) > 0 && (number/i)-trunc(number/i) == 0 && (number / i) != 1)
{
prime = TRUE
run = FALSE
}
}
if(prime == FALSE)
{
run = FALSE
}
}
else
{
prime = FALSE
run = FALSE
}
}
return(prime)
}
is_prime(11)
is_prime <- function(number)
{
prime = FALSE
run = TRUE
while(run == TRUE)
{
# checks whether the input parameter is positive AND a whole number
if(number > 0 && trunc(number) == number)
{
for(i in 2:10)
{
if((number / i) > 0 && (number/i)-trunc(number/i) == 0 && (number / i) != 1)
{
prime = TRUE
run = FALSE
}
}
prime == TRUE
if(prime == FALSE)
{
run = FALSE
}
}
else
{
prime = FALSE
run = FALSE
}
}
return(prime)
}
is_prime(11)
is_prime <- function(number)
{
prime = FALSE
run = TRUE
while(run == TRUE)
{
# checks whether the input parameter is positive AND a whole number
if(number > 0 && trunc(number) == number)
{
for(i in 2:10)
{
if((number / i) > 0 && (number/i)-trunc(number/i) == 0 && (number / i) != 1)
{
prime = TRUE
run = FALSE
}
}
prime == TRUE
run = FALSE
if(prime == FALSE)
{
run = FALSE
}
}
else
{
prime = FALSE
run = FALSE
}
}
return(prime)
}
is_prime(11)
is_prime(3)
is_prime(6)
is_prime <- function(number)
{
prime = TRUE
run = TRUE
while(run == TRUE)
{
# checks whether the input parameter is positive AND a whole number
if(number > 0 && trunc(number) == number)
{
for(i in 2:10)
{
if((number / i) > 0 && (number/i)-trunc(number/i) == 0 && (number / i) != 1)
{
prime = FALSE
run = FALSE
}
}
if(prime == TRUE)
{
run = FALSE
}
}
else
{
prime = FALSE
run = FALSE
}
}
return(prime)
}
is_prime(6)
is_prime(3)
is_prime(11)
# Function to check if a number is prime
is_prime <- function(number)
{
prime = TRUE
run = TRUE
while(run == TRUE)
{
# checks whether the input parameter is positive AND a whole number
if(number > 0 && trunc(number) == number)
{
for(i in 2:sqrt(number))
{
if((number / i) > 0 && (number/i)-trunc(number/i) == 0 && (number / i) != 1)
{
prime = FALSE
run = FALSE
}
}
if(prime == TRUE)
{
run = FALSE
}
}
else
{
prime = FALSE
run = FALSE
}
}
return(prime)
}
is_prime(11)
if((3 / 2) > 0 && is.integer(3 / 2) == FALSE)
{
print("hi")
}
###Pernille comments:
# Hint: You may use a while-loop or a for-loop to test divisibility
# Remember to handle edge cases like numbers less than 2
# Example usage:
# result <- is_prime(29)
# print(result)
# Expected Output (for number = 29): TRUE
is_prime(11)
is_prime(89)
is_prime(90)
